use logos::{Logos, Span};
#[derive(Logos, Debug, PartialEq, Clone, Copy)]
#[logos(skip r"[ \t\n\f]+")]
pub enum TokenKind {
    Eof,
    ErrorToken,
    #[token("BASE", ignore(case))]
    BASE,
    #[regex(r#"<[^<>\"{}|^`\\\u{00}-\u{20}]*>"#)]
    IRIREF,
    #[token("PREFIX", ignore(case))]
    PREFIX,
    #[regex("[A-Za-z]([A-Za-z0-9\\.-]*[A-Za-z0-9-])?:")]
    PNAME_NS,
    #[token("SELECT", ignore(case))]
    SELECT,
    #[token("DISTINCT", ignore(case))]
    DISTINCT,
    #[token("REDUCED", ignore(case))]
    REDUCED,
    #[token("(")]
    LParen,
    #[token("AS")]
    AS,
    #[token(")")]
    RParen,
    #[token("*")]
    Star,
    #[token("CONSTRUCT", ignore(case))]
    CONSTRUCT,
    #[token("WHERE", ignore(case))]
    WHERE,
    #[token("{")]
    LCurly,
    #[token("}")]
    RCurly,
    #[token("DESCRIBE")]
    DESCRIBE,
    #[token("ASK")]
    ASK,
    #[token("FROM")]
    FROM,
    #[token("NAMED")]
    NAMED,
    #[token("GROUP")]
    GROUP,
    #[token("BY")]
    BY,
    #[token("HAVING")]
    HAVING,
    #[token("ORDER")]
    ORDER,
    #[token("ASC")]
    ASC,
    #[token("DESC")]
    DESC,
    #[token("LIMIT")]
    LIMIT,
    #[token("INTEGER")]
    INTEGER,
    #[token("OFFSET")]
    OFFSET,
    #[token("VALUES")]
    VALUES,
    #[token("Semicolon")]
    Semicolon,
    #[token("Add")]
    Add,
    #[token("LOAD")]
    LOAD,
    #[token("SILENT")]
    SILENT,
    #[token("INTO")]
    INTO,
    #[token("CLEAR")]
    CLEAR,
    #[token("DROP")]
    DROP,
    #[token("CREATE")]
    CREATE,
    #[token("ADD")]
    ADD,
    #[token("TO")]
    TO,
    #[token("MOVE")]
    MOVE,
    #[token("COPY")]
    COPY,
    #[token("INSERT")]
    INSERT,
    #[token("DATA")]
    DATA,
    #[token("DELETE")]
    DELETE,
    #[token("WITH")]
    WITH,
    #[token("USING")]
    USING,
    #[token("DEFAULT")]
    DEFAULT,
    #[token("GRAPH")]
    GRAPH,
    #[token("ALL")]
    ALL,
    #[token("Dot")]
    Dot,
    #[token("OPTIONAL")]
    OPTIONAL,
    #[token("SERVICE")]
    SERVICE,
    #[token("BIND")]
    BIND,
    #[token("NIL")]
    NIL,
    #[token("UNDEF")]
    UNDEF,
    #[token("MINUS")]
    MINUS,
    #[token("UNION")]
    UNION,
    #[token("FILTER")]
    FILTER,
    #[token("Colon")]
    Colon,
    #[token("a")]
    a,
    #[token("Pipe")]
    Pipe,
    #[token("Slash")]
    Slash,
    #[token("Zirkumflex")]
    Zirkumflex,
    #[token("QuestionMark")]
    QuestionMark,
    #[token("Plus")]
    Plus,
    #[token("ExclamationMark")]
    ExclamationMark,
    #[token("LBrack")]
    LBrack,
    #[token("RBrack")]
    RBrack,
    #[token("VAR1")]
    VAR1,
    #[token("VAR2")]
    VAR2,
    #[token("DoublePipe")]
    DoublePipe,
    #[token("DoubleAnd")]
    DoubleAnd,
    #[token("Equals")]
    Equals,
    #[token("ExclamationMarkEquals")]
    ExclamationMarkEquals,
    #[token("Less")]
    Less,
    #[token("More")]
    More,
    #[token("LessEquals")]
    LessEquals,
    #[token("MoreEquals")]
    MoreEquals,
    #[token("IN")]
    IN,
    #[token("NOT")]
    NOT,
    #[token("Minus")]
    Minus,
    #[token("STR")]
    STR,
    #[token("LANG")]
    LANG,
    #[token("LANGMATCHES")]
    LANGMATCHES,
    #[token("DATATYPE")]
    DATATYPE,
    #[token("BOUND")]
    BOUND,
    #[token("IRI")]
    IRI,
    #[token("URI")]
    URI,
    #[token("BNODE")]
    BNODE,
    #[token("RAND")]
    RAND,
    #[token("ABS")]
    ABS,
    #[token("CEIL")]
    CEIL,
    #[token("FLOOR")]
    FLOOR,
    #[token("ROUND")]
    ROUND,
    #[token("CONCAT")]
    CONCAT,
    #[token("STRLEN")]
    STRLEN,
    #[token("UCASE")]
    UCASE,
    #[token("LCASE")]
    LCASE,
    #[token("ENCODE_FOR_URI")]
    ENCODE_FOR_URI,
    #[token("CONTAINS")]
    CONTAINS,
    #[token("STRSTARTS")]
    STRSTARTS,
    #[token("STRENDS")]
    STRENDS,
    #[token("STRBEFORE")]
    STRBEFORE,
    #[token("STRAFTER")]
    STRAFTER,
    #[token("YEAR")]
    YEAR,
    #[token("MONTH")]
    MONTH,
    #[token("DAY")]
    DAY,
    #[token("HOURS")]
    HOURS,
    #[token("MINUTES")]
    MINUTES,
    #[token("SECONDS")]
    SECONDS,
    #[token("TIMEZONE")]
    TIMEZONE,
    #[token("TZ")]
    TZ,
    #[token("NOW")]
    NOW,
    #[token("UUID")]
    UUID,
    #[token("STRUUID")]
    STRUUID,
    #[token("MD5")]
    MD5,
    #[token("SHA1")]
    SHA1,
    #[token("SHA256")]
    SHA256,
    #[token("SHA384")]
    SHA384,
    #[token("SHA512")]
    SHA512,
    #[token("COALESCE")]
    COALESCE,
    #[token("IF")]
    IF,
    #[token("STRLANG")]
    STRLANG,
    #[token("STRDT")]
    STRDT,
    #[token("sameTerm")]
    sameTerm,
    #[token("isIRI")]
    isIRI,
    #[token("isURI")]
    isURI,
    #[token("isBLANK")]
    isBLANK,
    #[token("isLITERAL")]
    isLITERAL,
    #[token("isNUMERIC")]
    isNUMERIC,
    #[token("REGEX")]
    REGEX,
    #[token("SUBSTR")]
    SUBSTR,
    #[token("REPLACE")]
    REPLACE,
    #[token("EXISTS")]
    EXISTS,
    #[token("COUNT")]
    COUNT,
    #[token("SUM")]
    SUM,
    #[token("MIN")]
    MIN,
    #[token("MAX")]
    MAX,
    #[token("AVG")]
    AVG,
    #[token("SAMPLE")]
    SAMPLE,
    #[token("GROUP_CONCAT")]
    GROUP_CONCAT,
    #[token("SEPARATOR")]
    SEPARATOR,
    #[token("LANGTAG")]
    LANGTAG,
    #[token("DoubleZirkumflex")]
    DoubleZirkumflex,
    #[token("DECIMAL")]
    DECIMAL,
    #[token("DOUBLE")]
    DOUBLE,
    #[token("INTEGER_POSITIVE")]
    INTEGER_POSITIVE,
    #[token("DECIMAL_POSITIVE")]
    DECIMAL_POSITIVE,
    #[token("DOUBLE_POSITIVE")]
    DOUBLE_POSITIVE,
    #[token("INTEGER_NEGATIVE")]
    INTEGER_NEGATIVE,
    #[token("DECIMAL_NEGATIVE")]
    DECIMAL_NEGATIVE,
    #[token("DOUBLE_NEGATIVE")]
    DOUBLE_NEGATIVE,
    #[token("True")]
    True,
    #[token("False")]
    False,
    #[token("STRING_LITERAL1")]
    STRING_LITERAL1,
    #[token("STRING_LITERAL2")]
    STRING_LITERAL2,
    #[token("STRING_LITERAL_LONG1")]
    STRING_LITERAL_LONG1,
    #[token("STRING_LITERAL_LONG2")]
    STRING_LITERAL_LONG2,
    #[token("PNAME_LN")]
    PNAME_LN,
    #[token("BLANK_NODE_LABEL")]
    BLANK_NODE_LABEL,
    #[token("ANON")]
    ANON,
}

#[derive(Debug)]
pub enum TreeKind {
    ErrorTree,
    QueryUnit,
    Query,
    Prologue,
    SelectQuery,
    ConstructQuery,
    DescribeQuery,
    AskQuery,
    ValuesClause,
    UpdateUnit,
    Update,
    BaseDecl,
    PrefixDecl,
    SelectClause,
    DatasetClause,
    WhereClause,
    SolutionModifier,
    SubSelect,
    Var,
    Expression,
    ConstructTemplate,
    TriplesTemplate,
    VarOrIri,
    DefaultGraphClause,
    NamedGraphClause,
    SourceSelector,
    iri,
    GroupGraphPattern,
    GroupClause,
    HavingClause,
    OrderClause,
    LimitOffsetClauses,
    GroupCondition,
    BuiltInCall,
    FunctionCall,
    HavingCondition,
    Constraint,
    OrderCondition,
    BrackettedExpression,
    LimitClause,
    OffsetClause,
    DataBlock,
    UpdateOne,
    Load,
    Clear,
    Drop,
    Move,
    Copy,
    Create,
    InsertData,
    DeleteData,
    DeleteWhere,
    Modify,
    GraphRef,
    GraphRefAll,
    Add,
    GraphOrDefault,
    QuadData,
    QuadPattern,
    DeleteClause,
    InsertClause,
    UsingClause,
    Quads,
    QuadsNotTriples,
    TriplesSameSubject,
    GroupGraphPatternSub,
    TriplesBlock,
    GraphPatternNotTriples,
    TriplesSameSubjectPath,
    GroupOrUnionGraphPattern,
    OptionalGraphPattern,
    MinusGraphPattern,
    GraphGraphPattern,
    ServiceGraphPattern,
    Filter,
    Bind,
    InlineData,
    InlineDataOneVar,
    InlineDataFull,
    DataBlockValue,
    RDFLiteral,
    NumericLiteral,
    BooleanLiteral,
    ArgList,
    ExpressionList,
    ConstructTriples,
    VarOrTerm,
    PropertyListNotEmpty,
    TriplesNode,
    PropertyList,
    Verb,
    ObjectList,
    Object,
    GraphNode,
    PropertyListPathNotEmpty,
    TriplesNodePath,
    PropertyListPath,
    VerbPath,
    VerbSimple,
    ObjectListPath,
    Path,
    ObjectPath,
    GraphNodePath,
    PathAlternative,
    PathSequence,
    PathEltOrInverse,
    PathElt,
    PathPrimary,
    PathMod,
    PathNegatedPropertySet,
    PathOneInPropertySet,
    Integer,
    Collection,
    BlankNodePropertyList,
    CollectionPath,
    BlankNodePropertyListPath,
    GraphTerm,
    BlankNode,
    ConditionalOrExpression,
    ConditionalAndExpression,
    ValueLogical,
    RelationalExpression,
    NumericExpression,
    AdditiveExpression,
    MultiplicativeExpression,
    NumericLiteralPositive,
    NumericLiteralNegative,
    UnaryExpression,
    PrimaryExpression,
    iriOrFunction,
    Aggregate,
    SubstringExpression,
    StrReplaceExpression,
    RegexExpression,
    ExistsFunc,
    NotExistsFunc,
    String,
    NumericLiteralUnsigned,
    PrefixedName,
}
